generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  todo
  doing
  done
}

enum SubtaskStatus {
  todo
  doing
  done
}

model User {
  id           String   @id @default(uuid()) @db.Uuid
  email        String   @unique @db.VarChar(255)
  username     String   @unique @db.VarChar(100)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  fullName     String?  @map("full_name") @db.VarChar(255)
  isActive     Boolean  @default(true) @map("is_active")
  isDemo       Boolean  @default(false) @map("is_demo")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  boards        Board[]
  refreshTokens RefreshToken[]

  @@index([email])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique @db.VarChar(500)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}

model Board {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  name        String   @db.VarChar(100)
  description String?
  color       String   @default("#3B82F6") @db.VarChar(7)
  isDefault   Boolean  @default(false) @map("is_default")
  isArchived  Boolean  @default(false) @map("is_archived")
  position    Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns Column[]
  tasks   Task[]

  @@unique([userId, position])
  @@unique([userId, name])
  @@index([userId])
  @@index([isDefault])
  @@map("boards")
}

model Column {
  id        String   @id @default(uuid()) @db.Uuid
  boardId   String   @map("board_id") @db.Uuid
  name      String   @db.VarChar(100)
  position  Int
  color     String   @default("#3B82F6") @db.VarChar(7)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  board Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@unique([boardId, position])
  @@unique([boardId, name])
  @@index([boardId])
  @@map("columns")
}

model Task {
  id          String     @id @default(uuid()) @db.Uuid
  boardId     String     @map("board_id") @db.Uuid
  title       String     @db.VarChar(255)
  description String?
  status      TaskStatus @default(todo)
  columnId    String     @map("column_id") @db.Uuid
  position    Int
  dueDate     DateTime?  @map("due_date") @db.Date
  priority    Int        @default(0)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  board    Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  column   Column    @relation(fields: [columnId], references: [id], onDelete: Cascade)
  subtasks Subtask[]

  @@unique([columnId, position])
  @@index([boardId])
  @@index([columnId])
  @@index([status])
  @@map("tasks")
}

model Subtask {
  id        String        @id @default(uuid()) @db.Uuid
  taskId    String        @map("task_id") @db.Uuid
  title     String        @db.VarChar(255)
  status    SubtaskStatus @default(todo)
  position  Int
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, position])
  @@index([taskId])
  @@index([status])
  @@map("subtasks")
}